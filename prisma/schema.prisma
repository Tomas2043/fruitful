// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  // User information
  firstName     String?
  lastName      String?
  email         String?   @unique
  emailVerified Boolean?  @default(false)
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String

	// Auth relations
  sessions      Session[]
  accounts      Account[]

  // User goals/settings
  calorieGoal 	Int   		@default(2000)
  stepGoal    	Int   		@default(10000)
  waterGoal   	Int 			@default(8) // cups of water
	targetWeight 	Float?
	startWeight		Float?

	// Relations
	nutritionLogs NutritionLogs[]
	activityLogs  ActivityLogs[]
	waterLogs     WaterLogs[]
	weightLogs    WeightLogs[]
	meals         Meal[]
	exercises     Exercise[]

  @@map("user")
}

model NutritionLogs {
	id						String		@id @default(cuid())
	date					DateTime
	userId				String
	user					User			@relation(fields: [userId], references: [id], onDelete: Cascade)
	calories			Int
	carbs					Float
	protein				Float
	fat						Float

	@@index([userId, date]) // Index for querying by user and date
	@@unique([userId, date]) // One log per day
}

model ActivityLogs {
	id						String		@id @default(cuid())
	date					DateTime
	userId				String
	user					User			@relation(fields: [userId], references: [id], onDelete: Cascade)
	steps					Int
	distance			Float
	floors				Int
	activeMinutes	Int

	@@index([userId, date]) // Index for querying by user and date
	@@unique([userId, date]) // One log per day
}

model WaterLogs {
	id						String		@id @default(cuid())
	date					DateTime
	userId				String
	user					User			@relation(fields: [userId], references: [id], onDelete: Cascade)
	cups					Int

	@@index([userId, date]) // Index for querying by user and date
	@@unique([userId, date]) // One log per day
}

model WeightLogs {
	id						String		@id @default(cuid())
	date					DateTime
	userId				String
	user					User			@relation(fields: [userId], references: [id], onDelete: Cascade)
	weight				Float

	@@index([userId, date]) // Index for querying by user and date
	@@unique([userId, date]) // One log per day
}

model Meal {
	id						String		@id @default(cuid())
	userId				String
	user					User			@relation(fields: [userId], references: [id], onDelete: Cascade)
	date					DateTime
	mealType			MealType
	name					String
	description		String?
	calories			Int

	@@index([userId, date]) // Index for querying by user and date
}

model Exercise {
	id						String		@id @default(cuid())
	userId					String
	user					User			@relation(fields: [userId], references: [id], onDelete: Cascade)
	date					DateTime
	name					String
	description		String?
	duration			Int
	distance			Float?
	calories			Int
	
	@@index([userId, date]) // Index for querying by user and date
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum MealType {
	BREAKFAST
	LUNCH
	DINNER
	SNACK
}
